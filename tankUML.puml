@startuml

class Object {
    +int posx
    +int posy
    +__init__(posx: int, posy: int)
}

class Tank {
    +int health
    +int attack_power
    +int defense_power
    +str direction
    +bool powerup_active_bullet
    +bool powerup_active_second
    +Timer powerup_timer
    +str bullet_shape
    +str tempbullet_shape
    +int temp_attack
    +int temp_defense
    +move(direction: str, obstacles: List<Obstacle>, enemy_pos: Tuple[int, int])
    +apply_powerup(powerup: PowerUp)
    +activate_power_second()
    +deactivate_power_second()
    +activate_power_bullet()
    +deactivate_power_bullet()
    +fire_bullet() : Bullet
    +Tank_Directions(shape: int) : str
    +is_hit() : bool
}

class Bullet {
    +str direction
    +str shape
    +move()
}

class Obstacle {
    +__init__(posx: int, posy: int)
}

class SpecialObstacle {
    +int health
    +hit() : bool
}

class PowerUp {
    +str type
    +int value
    +__init__(posx: int, posy: int, type: str, value: int)
}

class TankGame {
    +int width
    +int height
    +Tank tank1
    +Tank tank2
    +List<Obstacle> obstacles
    +List<PowerUp> powerups
    +Bullet bullet1
    +Bullet bullet2
    +bool running
    +List<Tuple<int, int>> bullet1_collision
    +List<Tuple<int, int>> bullet2_collision
    +generate_obstacles(num_obstacles: int) : List<Obstacle>
    +generate_powerups(num_powerups: int) : List<PowerUp>
    +clear_screen()
    +draw_map()
    +check_powerup_pickup(tank: Tank)
    +move_bullets()
    +handle_input()
    +play()
}

Object <|-- Tank
Object <|-- Bullet
Object <|-- Obstacle
Obstacle <|-- SpecialObstacle
Object <|-- PowerUp
TankGame *-- Tank
TankGame *-- Obstacle
TankGame *-- PowerUp
TankGame *-- Bullet

@enduml
